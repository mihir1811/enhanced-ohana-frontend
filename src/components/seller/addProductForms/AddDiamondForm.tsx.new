import React, { useState, useRef } from 'react';
import { toast } from 'react-hot-toast';
import { diamondService } from '@/services/diamondService';
import { getCookie } from '@/lib/cookie-utils';

// Keep all existing type definitions and constants...

const AddDiamondForm: React.FC = () => {
  const [form, setForm] = useState<DiamondFormState>(initialState);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const fileInputRef = useRef<HTMLInputElement | null>(null);
  const [activeStep, setActiveStep] = useState(0);

  // Keep existing handlers (handleChange, handleFileChange, handleRemoveImage)...

  const steps = [
    { id: 'basic', title: 'Basic Details', icon: '💎' },
    { id: 'specifications', title: 'Specifications', icon: '📏' },
    { id: 'measurements', title: 'Measurements', icon: '📐' },
    { id: 'media', title: 'Media', icon: '📸' },
    { id: 'certification', title: 'Certification', icon: '📜' }
  ];

  const renderStepContent = (step: number) => {
    switch (step) {
      case 0:
        return (
          <div className="space-y-6">
            <div className="bg-gradient-to-br from-indigo-50 to-blue-50 rounded-xl p-6">
              <h3 className="text-xl font-semibold text-gray-900 mb-2">Basic Information</h3>
              <p className="text-sm text-gray-600">Enter the essential details about your diamond.</p>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="form-label">Name</label>
                <input
                  type="text"
                  name="name"
                  value={form.name}
                  onChange={handleChange}
                  className="form-input"
                  placeholder="Enter diamond name"
                  required
                />
              </div>
              <div>
                <label className="form-label">Stone Type</label>
                <select
                  name="stoneType"
                  value={form.stoneType}
                  onChange={handleChange}
                  className="form-select"
                  required
                >
                  <option value="">Select stone type</option>
                  <option value="natural">Natural Diamond</option>
                  <option value="lab">Lab-Grown Diamond</option>
                </select>
              </div>
              <div className="md:col-span-2">
                <label className="form-label">Description</label>
                <textarea
                  name="description"
                  value={form.description}
                  onChange={handleChange}
                  rows={4}
                  className="form-textarea"
                  placeholder="Enter detailed description"
                  required
                />
              </div>
            </div>
          </div>
        );
      case 1:
        return (
          <div className="space-y-6">
            <div className="bg-gradient-to-br from-indigo-50 to-blue-50 rounded-xl p-6">
              <h3 className="text-xl font-semibold text-gray-900 mb-2">Diamond Specifications</h3>
              <p className="text-sm text-gray-600">Specify the physical characteristics of your diamond.</p>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              {/* Colors */}
              <div className="space-y-4">
                <div>
                  <label className="form-label">Color Grade</label>
                  <select name="color" value={form.color} onChange={handleChange} className="form-select" required>
                    <option value="">Select color grade</option>
                    {diamondColors.map(opt => (
                      <option key={opt.value} value={opt.value}>{opt.label}</option>
                    ))}
                  </select>
                </div>
                <div>
                  <label className="form-label">Fancy Color</label>
                  <select name="fancyColor" value={form.fancyColor} onChange={handleChange} className="form-select">
                    <option value="">Select fancy color</option>
                    {fancyColors.map(opt => (
                      <option key={opt.value} value={opt.value}>{opt.label}</option>
                    ))}
                  </select>
                </div>
              </div>

              {/* Cut and Clarity */}
              <div className="space-y-4">
                <div>
                  <label className="form-label">Cut Grade</label>
                  <select name="cut" value={form.cut} onChange={handleChange} className="form-select" required>
                    <option value="">Select cut grade</option>
                    {cutGrades.map(opt => (
                      <option key={opt.value} value={opt.value}>{opt.label}</option>
                    ))}
                  </select>
                </div>
                <div>
                  <label className="form-label">Clarity</label>
                  <select name="clarity" value={form.clarity} onChange={handleChange} className="form-select" required>
                    <option value="">Select clarity</option>
                    {clarities.map(opt => (
                      <option key={opt.value} value={opt.value}>{opt.label}</option>
                    ))}
                  </select>
                </div>
              </div>

              {/* Shape and Fluorescence */}
              <div className="space-y-4">
                <div>
                  <label className="form-label">Shape</label>
                  <select name="shape" value={form.shape} onChange={handleChange} className="form-select" required>
                    <option value="">Select shape</option>
                    {shapes.map(opt => (
                      <option key={opt.value} value={opt.value}>{opt.label}</option>
                    ))}
                  </select>
                </div>
                <div>
                  <label className="form-label">Fluorescence</label>
                  <select name="fluorescence" value={form.fluorescence} onChange={handleChange} className="form-select" required>
                    <option value="">Select fluorescence</option>
                    {fluorescences.map(opt => (
                      <option key={opt.value} value={opt.value}>{opt.label}</option>
                    ))}
                  </select>
                </div>
              </div>
            </div>
          </div>
        );
      // Add cases for other steps...
      default:
        return null;
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (activeStep < steps.length - 1) {
      setActiveStep(prev => prev + 1);
      return;
    }

    setLoading(true);
    setError('');
    try {
      // Your existing submit logic...
    } catch (err: any) {
      setError(err.message || 'Failed to submit');
      toast.error(err.message || 'Failed to add diamond');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-50 to-white pb-20">
      {/* Hero Header */}
      <div className="relative bg-gradient-to-br from-indigo-900 via-blue-900 to-purple-900 px-6 py-16">
        <div className="absolute inset-0 bg-[url('/grid.svg')] opacity-10"></div>
        <div className="relative max-w-4xl mx-auto text-center">
          <div className="inline-flex items-center px-3 py-1 rounded-full bg-white/10 backdrop-blur-sm border border-white/20 mb-6">
            <span className="w-2 h-2 rounded-full bg-emerald-400 animate-pulse mr-2"></span>
            <span className="text-white/90 text-sm font-medium">New Diamond</span>
          </div>
          <h1 className="text-4xl font-bold text-white mb-4 tracking-tight">Add Diamond Details</h1>
          <p className="text-lg text-blue-100/80">Fill in the specifications and upload media for your diamond listing.</p>
        </div>
      </div>

      {/* Main Form */}
      <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 -mt-10">
        <div className="bg-white rounded-2xl shadow-xl border border-gray-100/50 backdrop-blur-sm">
          {/* Progress Steps */}
          <div className="border-b border-gray-200">
            <div className="px-6 py-4">
              <div className="flex items-center justify-between">
                {steps.map((step, index) => (
                  <React.Fragment key={step.id}>
                    <button
                      type="button"
                      onClick={() => setActiveStep(index)}
                      className={`flex flex-col items-center ${
                        index <= activeStep ? 'text-blue-600' : 'text-gray-400'
                      }`}
                    >
                      <div className={`
                        w-10 h-10 rounded-full flex items-center justify-center text-lg mb-2
                        ${index < activeStep ? 'bg-blue-600 text-white' : 
                          index === activeStep ? 'bg-blue-100 text-blue-600 ring-2 ring-blue-600' :
                          'bg-gray-100 text-gray-400'}
                      `}>
                        {index < activeStep ? '✓' : step.icon}
                      </div>
                      <span className="text-sm font-medium whitespace-nowrap">{step.title}</span>
                    </button>
                    {index < steps.length - 1 && (
                      <div className={`w-24 h-1 ${
                        index < activeStep ? 'bg-blue-600' : 'bg-gray-200'
                      }`} />
                    )}
                  </React.Fragment>
                ))}
              </div>
            </div>
          </div>

          {/* Form Content */}
          <form onSubmit={handleSubmit} className="p-6 space-y-6">
            {/* Error Message */}
            {error && (
              <div className="bg-red-50 border-l-4 border-red-500 p-4 rounded-md">
                <div className="flex">
                  <div className="flex-shrink-0">
                    <svg className="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                    </svg>
                  </div>
                  <div className="ml-3">
                    <p className="text-sm text-red-700">{error}</p>
                  </div>
                </div>
              </div>
            )}

            {/* Step Content */}
            {renderStepContent(activeStep)}

            {/* Navigation */}
            <div className="flex items-center justify-between pt-6 border-t border-gray-200">
              <button
                type="button"
                onClick={() => setActiveStep(prev => Math.max(prev - 1, 0))}
                className="btn-secondary"
                disabled={activeStep === 0 || loading}
              >
                Previous Step
              </button>
              <button
                type="submit"
                className="btn-primary"
                disabled={loading}
              >
                {loading ? (
                  <div className="flex items-center">
                    <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Processing...
                  </div>
                ) : (
                  activeStep === steps.length - 1 ? 'Add Diamond' : 'Continue'
                )}
              </button>
            </div>
          </form>
        </div>
      </div>

      <style jsx>{`
        .form-label {
          @apply block text-sm font-medium text-gray-700 mb-1;
        }
        .form-input,
        .form-select,
        .form-textarea {
          @apply w-full px-4 py-2.5 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 
                 focus:border-blue-500 bg-white transition-colors duration-200;
        }
        .form-select {
          @apply pr-10;
        }
        .btn-primary {
          @apply px-6 py-2.5 text-white font-medium rounded-lg bg-gradient-to-r from-blue-600 to-indigo-600
                 hover:from-blue-700 hover:to-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 
                 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200;
        }
        .btn-secondary {
          @apply px-6 py-2.5 text-gray-700 font-medium rounded-lg border border-gray-300 bg-white
                 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500
                 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200;
        }
      `}</style>
    </div>
  );
};

export default AddDiamondForm;
